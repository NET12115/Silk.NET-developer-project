{
    "tasks": [
        {
            "profileName": "OpenGL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/master/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "glcore",
            "controlDescriptors": [],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "glcore"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenGL",
            "extensionsNamespace": "Silk.NET.OpenGL.Extensions",
            "legacyNameContainer": {
                "Linux": "libGL.so.1",
                "Windows": "opengl32.dll",
                "MacOS": "/System/Library/Frameworks/OpenGL.framework/OpenGL",
                "Android": "libGL.so.1",
                "IOS": "/System/Library/Frameworks/OpenGL.framework/OpenGL",
                "ClassName": "GLCoreLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenGL (Compatibility Profile)",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/master/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "gl",
            "controlDescriptors": [],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "gl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenGL.Legacy",
            "extensionsNamespace": "Silk.NET.OpenGL.Legacy.Extensions",
            "legacyNameContainer": {
                "Linux": "libGL.so.1",
                "Windows": "opengl32.dll",
                "MacOS": "/System/Library/Frameworks/OpenGL.framework/OpenGL",
                "Android": "libGL.so.1",
                "IOS": "/System/Library/Frameworks/OpenGL.framework/OpenGL",
                "ClassName": "OpenGLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenGLES",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/master/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "gles2",
            "controlDescriptors": [],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "gles2"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenGLES",
            "extensionsNamespace": "Silk.NET.OpenGLES.Extensions",
            "legacyNameContainer": {
                "Linux": "libGLESv2.so",
                "Windows": "libGLESv2.dll",
                "MacOS": "/System/Library/Frameworks/OpenGLES.framework/OpenGLES",
                "Android": "libGLESv2.so",
                "IOS": "/System/Library/Frameworks/OpenGLES.framework/OpenGLES",
                "ClassName": "OpenGLESLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenCL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenCL-Docs/master/xml/cl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "cl",
            "controlDescriptors": [],
            "converter": {
                "reader": "cl",
                "constructor": "cl",
                "className": "CL"
            },
            "prefix": "cl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "opencl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenCL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenCL",
            "extensionsNamespace": "Silk.NET.OpenCL.Extensions",
            "legacyNameContainer": {
                "Linux": "libOpenCL.so",
                "Windows": "opencl.dll",
                "MacOS": "/System/Library/Frameworks/OpenCL.framework/OpenCL",
                "Android": "libOpenCL.so",
                "IOS": "/System/Library/Frameworks/OpenCL.framework/OpenCL",
                "ClassName": "OpenCLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "ID3D11Buffer*": "IntPtr",
                    "ID3D11Texture2D*":  "IntPtr",
                    "ID3D11Texture3D*": "IntPtr",
                    "ID3D11Device*": "IntPtr",
                    "ID3D12Device*": "IntPtr",
                    "ID3D12Resource*": "IntPtr",
                    "ID3D12CommandQueue*": "IntPtr"
                },
                {
                    "cl_GLsync": "intptr_t",
                    "cl_accelerator_intel": "intptr_t",
                    "cl_platform_id": "intptr_t",
                    "cl_device_id": "intptr_t",
                    "cl_context": "intptr_t",
                    "cl_command_queue": "intptr_t",
                    "cl_mem": "intptr_t",
                    "cl_program": "intptr_t",
                    "cl_kernel": "intptr_t",
                    "cl_event": "intptr_t",
                    "cl_sampler": "intptr_t",
                    "cl_GLint": "cl_int",
                    "cl_GLenum": "cl_uint",
                    "cl_GLuint": "cl_uint",
                    "cl_d3d11_device_source_khr": "cl_uint",
                    "cl_d3d11_device_set_khr": "cl_uint",
                    "cl_dx9_media_adapter_type_khr": "cl_uint",
                    "cl_dx9_media_adapter_set_khr": "cl_uint",
                    "cl_d3d10_device_source_khr": "cl_uint",
                    "cl_d3d10_device_set_khr": "cl_uint",
                    "cl_dx9_device_source_intel": "cl_uint",
                    "cl_dx9_device_set_intel": "cl_uint",
                    "cl_accelerator_type_intel": "cl_uint",
                    "cl_accelerator_info_intel": "cl_uint",
                    "cl_diagnostics_verbose_level": "cl_uint",
                    "cl_va_api_device_source_intel": "cl_uint",
                    "cl_va_api_device_set_intel": "cl_uint",
                    "CLeglImageKHR": "intptr_t",
                    "CLeglDisplayKHR": "intptr_t",
                    "CLeglSyncKHR": "intptr_t",
                    "cl_egl_image_properties_khr": "intptr_t",
                    "cl_device_partition_property_ext": "cl_ulong",
                    "cl_mem_migration_flags_ext": "CLenum",
                    "cl_image_pitch_info_qcom": "cl_uint",
                    "cl_image_format": "cl_uint",
                    "cl_queue_priority_khr": "cl_uint",
                    "cl_queue_throttle_khr": "cl_uint",
                    "cl_import_properties_arm": "intptr_t",
                    "cl_svm_mem_flags_arm": "CLenum",
                    "cl_kernel_exec_info_arm": "cl_uint",
                    "cl_device_svm_capabilities_arm": "CLenum",
                    "cl_gl_context_info": "cl_uint",
                    "cl_gl_object_type": "cl_uint",
                    "cl_gl_texture_info": "cl_uint",
                    "cl_gl_platform_info": "cl_uint",
                    "cl_bool": "bool",
                    "CLenum": "cl_ulong",
                    "cl_device_type": "CLenum",
                    "cl_platform_info": "cl_uint",
                    "cl_device_info": "cl_uint",
                    "cl_device_fp_config": "CLenum",
                    "cl_device_mem_cache_type": "cl_uint",
                    "cl_device_local_mem_type": "cl_uint",
                    "cl_device_exec_capabilities": "CLenum",
                    "cl_device_svm_capabilities": "CLenum",
                    "cl_command_queue_properties": "CLenum",
                    "cl_device_partition_property": "intptr_t",
                    "cl_device_affinity_domain": "CLenum",
                    "cl_context_properties": "intptr_t",
                    "cl_context_info": "cl_uint",
                    "cl_queue_properties": "CLenum",
                    "cl_queue_properties_khr": "CLenum",
                    "cl_command_queue_info": "cl_uint",
                    "cl_channel_order": "cl_uint",
                    "cl_channel_type": "cl_uint",
                    "cl_mem_flags": "CLenum",
                    "cl_svm_mem_flags": "CLenum",
                    "cl_mem_object_type": "cl_uint",
                    "cl_mem_info": "cl_uint",
                    "cl_mem_migration_flags": "CLenum",
                    "cl_image_info": "cl_uint",
                    "cl_buffer_create_type": "cl_uint",
                    "cl_addressing_mode": "cl_uint",
                    "cl_filter_mode": "cl_uint",
                    "cl_sampler_info": "cl_uint",
                    "cl_map_flags": "CLenum",
                    "cl_pipe_properties": "intptr_t",
                    "cl_pipe_info": "cl_uint",
                    "cl_program_info": "cl_uint",
                    "cl_program_build_info": "cl_uint",
                    "cl_program_binary_type": "cl_uint",
                    "cl_build_status": "cl_int",
                    "cl_kernel_info": "cl_uint",
                    "cl_kernel_arg_info": "cl_uint",
                    "cl_kernel_arg_address_qualifier": "cl_uint",
                    "cl_kernel_arg_access_qualifier": "cl_uint",
                    "cl_kernel_arg_type_qualifier": "CLenum",
                    "cl_kernel_work_group_info": "cl_uint",
                    "cl_kernel_sub_group_info": "cl_uint",
                    "cl_event_info": "cl_uint",
                    "cl_command_type": "cl_uint",
                    "cl_profiling_info": "cl_uint",
                    "cl_sampler_properties": "CLenum",
                    "cl_kernel_exec_info": "cl_uint",
                    "cl_device_unified_shared_memory_capabilities_intel": "CLenum",
                    "cl_mem_properties_intel": "CLenum",
                    "cl_mem_alloc_flags_intel": "CLenum",
                    "cl_mem_info_intel": "cl_uint",
                    "cl_unified_shared_memory_type_intel": "cl_uint",
                    "cl_mem_migration_flags_intel": "CLenum",
                    "cl_mem_advice_intel": "cl_uint",
                    "cl_version": "cl_uint",
                    "cl_mem_properties": "CLenum"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Vulkan",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/master/xml/vk.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "vulkan",
            "controlDescriptors": [],
            "converter": {
                "reader": "vk",
                "constructor": "vk",
                "className": "Vk"
            },
            "prefix": "vk",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "vulkan"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Vulkan",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Vulkan",
            "extensionsNamespace": "Silk.NET.Vulkan.Extensions",
            "legacyNameContainer": {
                "Linux": "libvulkan.so.1",
                "Windows": "vulkan-1.dll",
                "MacOS": "libMoltenVK.dylib",
                "Android": "libvulkan.so.1",
                "IOS": "__Internal",
                "ClassName": "VulkanLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "PFN_vkInternalAllocationNotification": "FuncPtr",
                    "PFN_vkInternalFreeNotification": "FuncPtr",
                    "PFN_vkReallocationFunction": "FuncPtr",
                    "PFN_vkAllocationFunction": "FuncPtr",
                    "PFN_vkFreeFunction": "FuncPtr",
                    "PFN_vkVoidFunction": "FuncPtr",
                    "PFN_vkDebugReportCallbackEXT": "FuncPtr",
                    "PFN_vkDebugUtilsMessengerCallbackEXT": "FuncPtr",
                    "char": "byte",
                    "Window": "IntPtr"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Assimp",
            "sources": [
                "src/Assimp/Include/assimp.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "assimp",
            "controlDescriptors": [
                "convert-windows-only"
            ],
            "converter": {},
            "prefix": "ai",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/shared",
                    "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um",
                    "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/ucrt",
                    "-IC:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/include",
                    "-IC:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.26.28801/include",
                    "-Isrc/Assimp/Include"
                ],
                "traverse": [
                    "src/Assimp/Include/assimp/cexport.h",
                    "src/Assimp/Include/assimp/cfileio.h",
                    "src/Assimp/Include/assimp/cimport.h",
                    "src/Assimp/Include/assimp/types.h",
                    "src/Assimp/Include/assimp/importerdesc.h",
                    "src/Assimp/Include/assimp/material.h",
                    "src/Assimp/Include/assimp/version.h",
                    "src/Assimp/Include/assimp/texture.h",
                    "src/Assimp/Include/assimp/mesh.h",
                    "src/Assimp/Include/assimp/light.h",
                    "src/Assimp/Include/assimp/camera.h",
                    "src/Assimp/Include/assimp/anim.h",
                    "src/Assimp/Include/assimp/metadata.h",
                    "src/Assimp/Include/assimp/scene.h",
                    "src/Assimp/Include/assimp/aabb.h"
                ],
                "classes": {
                    "assimp.h": "[Core]Assimp"
                }
            },
            "exclude": [
                "aiColor3D",
                "ai_real",
                "_AI_ENFORCE_ENUM_SIZE",
                "_aiAnimBehaviour_Force32Bit",
                "_aiBlendMode_Force32Bit",
                "_AI_DLS_ENFORCE_ENUM_SIZE",
                "_aiLightSource_Force32Bit",
                "FORCE_32BIT",
                "_aiMorphingMethod_Force32Bit",
                "_AI_ORIGIN_ENFORCE_ENUM_SIZE",
                "_aiPrimitiveType_Force32Bit",
                "_aiPTI_Force32Bit",
                "_aiShadingMode_Force32Bit",
                "_aiTextureFlags_Force32Bit",
                "_aiTextureMapMode_Force32Bit",
                "_aiTextureMapping_Force32Bit",
                "_aiTextureOp_Force32Bit",
                "_aiTextureType_Force32Bit"
            ],
            "rename": {
                "aiString": "AssimpString"
            },
            "bakery": {
                "profileNames": [
                    "assimp"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Assimp",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Assimp",
            "extensionsNamespace": "Silk.NET.Assimp.Extensions",
            "legacyNameContainer": {
                "Linux": "libassimp.so.5",
                "Windows": "Assimp32.dll",
                "MacOS": "libassimp.5.dylib",
                "Android": "libassimp.so.5",
                "IOS": "__Internal",
                "ClassName": "AssimpLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "aiVector3D": "System.Numerics.Vector3",
                    "aiColor4D": "System.Numerics.Vector4",
                    "aiColor3D": "System.Numerics.Vector3",
                    "aiVector2D": "System.Numerics.Vector2",
                    "aiQuaternion": "System.Numerics.Quaternion",
                    "aiMatrix4x4": "System.Numerics.Matrix4x4",
                    "aiMatrix3x3": "AssimpMatrix3x3",
                    "ai_real": "float"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenXR",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenXR-SDK-Source/master/specification/registry/xr.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "openxr",
            "controlDescriptors": [],
            "converter": {
                "reader": "vk",
                "constructor": "vk",
                "className": "XR"
            },
            "prefix": "xr",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "openxr"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenXR",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenXR",
            "extensionsNamespace": "Silk.NET.OpenXR.Extensions",
            "legacyNameContainer": {
                "Linux": "libopenxr_loader.so.1",
                "Windows": "openxr_loader.dll",
                "MacOS": "null",
                "Android": "libopenxr_loader.so.1",
                "IOS": "__Internal",
                "ClassName": "OpenXRLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "char": "byte",
                    "XR_DEFINE_ATOM": "uint64_t",
                    "LUID": "ulong",
                    "D3D_FEATURE_LEVEL": "uint",
                    "VkInstance": "Silk.NET.GLFW.VkHandle",
                    "VkPhysicalDevice": "Silk.NET.GLFW.VkHandle",
                    "VkImage": "ulong",
                    "VkDevice": "Silk.NET.GLFW.VkHandle",
                    "PFN_xrVoidFunction": "FuncPtr",
                    "PFN_xrDebugUtilsMessengerCallbackEXT": "FuncPtr",
                    "PFNEGLGETPROCADDRESSPROC": "FuncPtr",
                    "ID3D11Buffer*": "IntPtr",
                    "ID3D11Texture2D*":  "IntPtr",
                    "ID3D11Texture3D*": "IntPtr",
                    "ID3D11Device*": "IntPtr",
                    "ID3D12Device*": "IntPtr",
                    "ID3D12Resource*": "IntPtr",
                    "ID3D12CommandQueue*": "IntPtr",
                    "IUnknown*": "IntPtr",
                    "EGLDisplay": "IntPtr",
                    "EGLConfig": "IntPtr",
                    "EGLContext": "IntPtr",
                    "GLXFBConfig": "IntPtr",
                    "VkFormat": "uint"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "SDL",
            "sources": [
                "build/submodules/SDL-mirror/include/SDL.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "sdl",
            "controlDescriptors": [
                "convert-windows-only"
            ],
            "converter": {},
            "prefix": "sdl",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/shared",
                    "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um",
                    "-IC:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/ucrt",
                    "-IC:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.26.28801/include",
                    "-IC:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.26.28801/include",
                    "-Ibuild/submodules/SDL-mirror/include",
                    "-D__IPHONEOS__",
                    "-D__ANDROID__",
                    "-D__WIN32__",
                    "-D__WINRT__",
                    "-D__LINUX__"
                ],
                "traverse": [
                    "!build/submodules/SDL-mirror/include/SDL_rwops.h",
                    "build/submodules/SDL-mirror/include/*.h"
                ],
                "classes": {
                    "SDL.h": "[Core]SDL"
                }
            },
            "exclude": [
            ],
            "rename": {
                "__AnonymousEnum_SDL_shape_L80_C9": "WindowShapeModeVal",
                "__AnonymousEnum_SDL_stdinc_L161_C9": "SdlBool",
                "__AnonymousRecord_SDL_gamecontroller_L84_C5": "GameControllerBindValue",
                "__AnonymousRecord_SDL_gamecontroller_L88_C9": "GameControllerHatValue",
                "_SDL_Haptic": "Haptic",
                "_SDL_GameController": "GameController",
                "_SDL_Joystick": "Joystick",
                "_SDL_AudioStream": "AudioStream",
                "_SDL_iconv_t": "Icon",
                "_SDL_Sensor": "Sensor"
            },
            "bakery": {
                "profileNames": [
                    "SDL"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Windowing",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.SDL",
            "extensionsNamespace": "Silk.NET.SDL.Extensions",
            "legacyNameContainer": {
                "Linux": "libSDL2-2.0.so.0",
                "Windows": "SDL2.dll",
                "MacOS": "libSDL2-2.0.0.dylib",
                "Android": "libSDL2-2.0.so.0",
                "IOS": "__Internal",
                "ClassName": "SDLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$typemapPrecedesInjections": "true",
                    "WindowShapeMode": "WindowShapeModeVal",
                    "SDL_bool": "SdlBool",
                    "SDL_RWops": "RWops"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        }
    ]
}