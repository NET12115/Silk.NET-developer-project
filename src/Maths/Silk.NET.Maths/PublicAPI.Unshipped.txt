#nullable enable
override Silk.NET.Maths.Box2<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Box2<T>.GetHashCode() -> int
override Silk.NET.Maths.Box3<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Box3<T>.GetHashCode() -> int
override Silk.NET.Maths.Circle<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Circle<T>.GetHashCode() -> int
override Silk.NET.Maths.Cube<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Cube<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix2x2<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix2x2<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix2x2<T>.ToString() -> string!
override Silk.NET.Maths.Matrix2x3<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix2x3<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix2x3<T>.ToString() -> string!
override Silk.NET.Maths.Matrix2x4<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix2x4<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix2x4<T>.ToString() -> string!
override Silk.NET.Maths.Matrix3x2<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix3x2<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix3x2<T>.ToString() -> string!
override Silk.NET.Maths.Matrix3x3<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix3x3<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix3x3<T>.ToString() -> string!
override Silk.NET.Maths.Matrix3x4<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix3x4<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix3x4<T>.ToString() -> string!
override Silk.NET.Maths.Matrix4x2<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix4x2<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix4x2<T>.ToString() -> string!
override Silk.NET.Maths.Matrix4x3<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix4x3<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix4x3<T>.ToString() -> string!
override Silk.NET.Maths.Matrix4x4<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Matrix4x4<T>.GetHashCode() -> int
override Silk.NET.Maths.Matrix4x4<T>.ToString() -> string!
override Silk.NET.Maths.Plane<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Plane<T>.GetHashCode() -> int
override Silk.NET.Maths.Plane<T>.ToString() -> string!
override Silk.NET.Maths.Quaternion<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Quaternion<T>.GetHashCode() -> int
override Silk.NET.Maths.Quaternion<T>.ToString() -> string!
override Silk.NET.Maths.Ray2<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Ray2<T>.GetHashCode() -> int
override Silk.NET.Maths.Ray3<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Ray3<T>.GetHashCode() -> int
override Silk.NET.Maths.Rectangle<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Rectangle<T>.GetHashCode() -> int
override Silk.NET.Maths.Sphere<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Sphere<T>.GetHashCode() -> int
override Silk.NET.Maths.Vector2<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Vector2<T>.GetHashCode() -> int
override Silk.NET.Maths.Vector2<T>.ToString() -> string!
override Silk.NET.Maths.Vector3<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Vector3<T>.GetHashCode() -> int
override Silk.NET.Maths.Vector3<T>.ToString() -> string!
override Silk.NET.Maths.Vector4<T>.Equals(object? obj) -> bool
override Silk.NET.Maths.Vector4<T>.GetHashCode() -> int
override Silk.NET.Maths.Vector4<T>.ToString() -> string!
Silk.NET.Maths.Box2<T>
Silk.NET.Maths.Box2<T>.Box2() -> void
Silk.NET.Maths.Box2<T>.Box2(Silk.NET.Maths.Vector2<T> min, Silk.NET.Maths.Vector2<T> max) -> void
Silk.NET.Maths.Box2<T>.Center.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Box2<T>.Contains(Silk.NET.Maths.Box2<T> other) -> bool
Silk.NET.Maths.Box2<T>.Contains(Silk.NET.Maths.Vector2<T> point) -> bool
Silk.NET.Maths.Box2<T>.Equals(Silk.NET.Maths.Box2<T> other) -> bool
Silk.NET.Maths.Box2<T>.GetDistanceToNearestEdge(Silk.NET.Maths.Vector2<T> point) -> T
Silk.NET.Maths.Box2<T>.GetInflated(Silk.NET.Maths.Vector2<T> point) -> Silk.NET.Maths.Box2<T>
Silk.NET.Maths.Box2<T>.GetScaled(Silk.NET.Maths.Vector2<T> scale, Silk.NET.Maths.Vector2<T> anchor) -> Silk.NET.Maths.Box2<T>
Silk.NET.Maths.Box2<T>.GetTranslated(Silk.NET.Maths.Vector2<T> distance) -> Silk.NET.Maths.Box2<T>
Silk.NET.Maths.Box2<T>.Max -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Box2<T>.Min -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Box2<T>.Size.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Box3<T>
Silk.NET.Maths.Box3<T>.Box3() -> void
Silk.NET.Maths.Box3<T>.Box3(Silk.NET.Maths.Vector3<T> min, Silk.NET.Maths.Vector3<T> max) -> void
Silk.NET.Maths.Box3<T>.Center.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Box3<T>.Contains(Silk.NET.Maths.Box3<T> other) -> bool
Silk.NET.Maths.Box3<T>.Contains(Silk.NET.Maths.Vector3<T> point) -> bool
Silk.NET.Maths.Box3<T>.Equals(Silk.NET.Maths.Box3<T> other) -> bool
Silk.NET.Maths.Box3<T>.GetDistanceToNearestEdge(Silk.NET.Maths.Vector3<T> point) -> T
Silk.NET.Maths.Box3<T>.GetInflated(Silk.NET.Maths.Vector3<T> point) -> Silk.NET.Maths.Box3<T>
Silk.NET.Maths.Box3<T>.GetScaled(Silk.NET.Maths.Vector3<T> scale, Silk.NET.Maths.Vector3<T> anchor) -> Silk.NET.Maths.Box3<T>
Silk.NET.Maths.Box3<T>.GetTranslated(Silk.NET.Maths.Vector3<T> distance) -> Silk.NET.Maths.Box3<T>
Silk.NET.Maths.Box3<T>.Max -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Box3<T>.Min -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Box3<T>.Size.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Circle<T>
Silk.NET.Maths.Circle<T>.Center -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Circle<T>.Circle() -> void
Silk.NET.Maths.Circle<T>.Circle(Silk.NET.Maths.Vector2<T> center, T radius) -> void
Silk.NET.Maths.Circle<T>.Circumference.get -> T
Silk.NET.Maths.Circle<T>.Contains(Silk.NET.Maths.Circle<T> other) -> bool
Silk.NET.Maths.Circle<T>.Contains(Silk.NET.Maths.Vector2<T> point) -> bool
Silk.NET.Maths.Circle<T>.Diameter.get -> T
Silk.NET.Maths.Circle<T>.Equals(Silk.NET.Maths.Circle<T> other) -> bool
Silk.NET.Maths.Circle<T>.GetDistanceToNearestEdge(Silk.NET.Maths.Vector2<T> point) -> T
Silk.NET.Maths.Circle<T>.GetDistanceToNearestEdgeSquared(Silk.NET.Maths.Vector2<T> point) -> T
Silk.NET.Maths.Circle<T>.GetInflated(Silk.NET.Maths.Vector2<T> point) -> Silk.NET.Maths.Circle<T>
Silk.NET.Maths.Circle<T>.GetTranslated(Silk.NET.Maths.Vector2<T> distance) -> Silk.NET.Maths.Circle<T>
Silk.NET.Maths.Circle<T>.Radius -> T
Silk.NET.Maths.Circle<T>.SquaredRadius.get -> T
Silk.NET.Maths.Cube<T>
Silk.NET.Maths.Cube<T>.Center.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Cube<T>.Contains(Silk.NET.Maths.Cube<T> other) -> bool
Silk.NET.Maths.Cube<T>.Contains(Silk.NET.Maths.Vector3<T> point) -> bool
Silk.NET.Maths.Cube<T>.Cube() -> void
Silk.NET.Maths.Cube<T>.Cube(Silk.NET.Maths.Vector3<T> origin, Silk.NET.Maths.Vector3<T> size) -> void
Silk.NET.Maths.Cube<T>.Equals(Silk.NET.Maths.Cube<T> other) -> bool
Silk.NET.Maths.Cube<T>.GetDistanceToNearestEdge(Silk.NET.Maths.Vector3<T> point) -> T
Silk.NET.Maths.Cube<T>.GetInflated(Silk.NET.Maths.Vector3<T> point) -> Silk.NET.Maths.Cube<T>
Silk.NET.Maths.Cube<T>.GetScaled(Silk.NET.Maths.Vector3<T> scale, Silk.NET.Maths.Vector3<T> anchor) -> Silk.NET.Maths.Cube<T>
Silk.NET.Maths.Cube<T>.GetTranslated(Silk.NET.Maths.Vector3<T> distance) -> Silk.NET.Maths.Cube<T>
Silk.NET.Maths.Cube<T>.HalfSize.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Cube<T>.Max.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Cube<T>.Origin -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Cube<T>.Size -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix2x2
Silk.NET.Maths.Matrix2x2<T>
Silk.NET.Maths.Matrix2x2<T>.Column1.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x2<T>.Column2.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x2<T>.Equals(Silk.NET.Maths.Matrix2x2<T> other) -> bool
Silk.NET.Maths.Matrix2x2<T>.GetDeterminant() -> T
Silk.NET.Maths.Matrix2x2<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix2x2<T>.M11.get -> T
Silk.NET.Maths.Matrix2x2<T>.M11.set -> void
Silk.NET.Maths.Matrix2x2<T>.M12.get -> T
Silk.NET.Maths.Matrix2x2<T>.M12.set -> void
Silk.NET.Maths.Matrix2x2<T>.M21.get -> T
Silk.NET.Maths.Matrix2x2<T>.M21.set -> void
Silk.NET.Maths.Matrix2x2<T>.M22.get -> T
Silk.NET.Maths.Matrix2x2<T>.M22.set -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2() -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(Silk.NET.Maths.Vector2<T> row1, Silk.NET.Maths.Vector2<T> row2) -> void
Silk.NET.Maths.Matrix2x2<T>.Matrix2x2(T m11, T m12, T m21, T m22) -> void
Silk.NET.Maths.Matrix2x2<T>.Row1 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x2<T>.Row2 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x2<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix2x2<T>.this[int i].get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x3
Silk.NET.Maths.Matrix2x3<T>
Silk.NET.Maths.Matrix2x3<T>.Column1.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x3<T>.Column2.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x3<T>.Column3.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x3<T>.Equals(Silk.NET.Maths.Matrix2x3<T> other) -> bool
Silk.NET.Maths.Matrix2x3<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix2x3<T>.M11.get -> T
Silk.NET.Maths.Matrix2x3<T>.M11.set -> void
Silk.NET.Maths.Matrix2x3<T>.M12.get -> T
Silk.NET.Maths.Matrix2x3<T>.M12.set -> void
Silk.NET.Maths.Matrix2x3<T>.M13.get -> T
Silk.NET.Maths.Matrix2x3<T>.M13.set -> void
Silk.NET.Maths.Matrix2x3<T>.M21.get -> T
Silk.NET.Maths.Matrix2x3<T>.M21.set -> void
Silk.NET.Maths.Matrix2x3<T>.M22.get -> T
Silk.NET.Maths.Matrix2x3<T>.M22.set -> void
Silk.NET.Maths.Matrix2x3<T>.M23.get -> T
Silk.NET.Maths.Matrix2x3<T>.M23.set -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3() -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(Silk.NET.Maths.Vector3<T> row1, Silk.NET.Maths.Vector3<T> row2) -> void
Silk.NET.Maths.Matrix2x3<T>.Matrix2x3(T m11, T m12, T m13, T m21, T m22, T m23) -> void
Silk.NET.Maths.Matrix2x3<T>.Row1 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix2x3<T>.Row2 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix2x3<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix2x3<T>.this[int i].get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix2x4
Silk.NET.Maths.Matrix2x4<T>
Silk.NET.Maths.Matrix2x4<T>.Column1.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x4<T>.Column2.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x4<T>.Column3.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x4<T>.Column4.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix2x4<T>.Equals(Silk.NET.Maths.Matrix2x4<T> other) -> bool
Silk.NET.Maths.Matrix2x4<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix2x4<T>.M11.get -> T
Silk.NET.Maths.Matrix2x4<T>.M11.set -> void
Silk.NET.Maths.Matrix2x4<T>.M12.get -> T
Silk.NET.Maths.Matrix2x4<T>.M12.set -> void
Silk.NET.Maths.Matrix2x4<T>.M13.get -> T
Silk.NET.Maths.Matrix2x4<T>.M13.set -> void
Silk.NET.Maths.Matrix2x4<T>.M14.get -> T
Silk.NET.Maths.Matrix2x4<T>.M14.set -> void
Silk.NET.Maths.Matrix2x4<T>.M21.get -> T
Silk.NET.Maths.Matrix2x4<T>.M21.set -> void
Silk.NET.Maths.Matrix2x4<T>.M22.get -> T
Silk.NET.Maths.Matrix2x4<T>.M22.set -> void
Silk.NET.Maths.Matrix2x4<T>.M23.get -> T
Silk.NET.Maths.Matrix2x4<T>.M23.set -> void
Silk.NET.Maths.Matrix2x4<T>.M24.get -> T
Silk.NET.Maths.Matrix2x4<T>.M24.set -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4() -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(Silk.NET.Maths.Vector4<T> row1, Silk.NET.Maths.Vector4<T> row2) -> void
Silk.NET.Maths.Matrix2x4<T>.Matrix2x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24) -> void
Silk.NET.Maths.Matrix2x4<T>.Row1 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix2x4<T>.Row2 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix2x4<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix2x4<T>.this[int i].get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix3x2
Silk.NET.Maths.Matrix3x2<T>
Silk.NET.Maths.Matrix3x2<T>.Column1.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x2<T>.Column2.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x2<T>.Equals(Silk.NET.Maths.Matrix3x2<T> other) -> bool
Silk.NET.Maths.Matrix3x2<T>.GetDeterminant() -> T
Silk.NET.Maths.Matrix3x2<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix3x2<T>.M11.get -> T
Silk.NET.Maths.Matrix3x2<T>.M11.set -> void
Silk.NET.Maths.Matrix3x2<T>.M12.get -> T
Silk.NET.Maths.Matrix3x2<T>.M12.set -> void
Silk.NET.Maths.Matrix3x2<T>.M21.get -> T
Silk.NET.Maths.Matrix3x2<T>.M21.set -> void
Silk.NET.Maths.Matrix3x2<T>.M22.get -> T
Silk.NET.Maths.Matrix3x2<T>.M22.set -> void
Silk.NET.Maths.Matrix3x2<T>.M31.get -> T
Silk.NET.Maths.Matrix3x2<T>.M31.set -> void
Silk.NET.Maths.Matrix3x2<T>.M32.get -> T
Silk.NET.Maths.Matrix3x2<T>.M32.set -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2() -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(Silk.NET.Maths.Vector2<T> row1, Silk.NET.Maths.Vector2<T> row2, Silk.NET.Maths.Vector2<T> row3) -> void
Silk.NET.Maths.Matrix3x2<T>.Matrix3x2(T m11, T m12, T m21, T m22, T m31, T m32) -> void
Silk.NET.Maths.Matrix3x2<T>.Row1 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix3x2<T>.Row2 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix3x2<T>.Row3 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix3x2<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix3x2<T>.this[int i].get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix3x3
Silk.NET.Maths.Matrix3x3<T>
Silk.NET.Maths.Matrix3x3<T>.Column1.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x3<T>.Column2.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x3<T>.Column3.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x3<T>.Equals(Silk.NET.Maths.Matrix3x3<T> other) -> bool
Silk.NET.Maths.Matrix3x3<T>.GetDeterminant() -> T
Silk.NET.Maths.Matrix3x3<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix3x3<T>.M11.get -> T
Silk.NET.Maths.Matrix3x3<T>.M11.set -> void
Silk.NET.Maths.Matrix3x3<T>.M12.get -> T
Silk.NET.Maths.Matrix3x3<T>.M12.set -> void
Silk.NET.Maths.Matrix3x3<T>.M13.get -> T
Silk.NET.Maths.Matrix3x3<T>.M13.set -> void
Silk.NET.Maths.Matrix3x3<T>.M21.get -> T
Silk.NET.Maths.Matrix3x3<T>.M21.set -> void
Silk.NET.Maths.Matrix3x3<T>.M22.get -> T
Silk.NET.Maths.Matrix3x3<T>.M22.set -> void
Silk.NET.Maths.Matrix3x3<T>.M23.get -> T
Silk.NET.Maths.Matrix3x3<T>.M23.set -> void
Silk.NET.Maths.Matrix3x3<T>.M31.get -> T
Silk.NET.Maths.Matrix3x3<T>.M31.set -> void
Silk.NET.Maths.Matrix3x3<T>.M32.get -> T
Silk.NET.Maths.Matrix3x3<T>.M32.set -> void
Silk.NET.Maths.Matrix3x3<T>.M33.get -> T
Silk.NET.Maths.Matrix3x3<T>.M33.set -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3() -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Matrix4x4<T> value) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(Silk.NET.Maths.Vector3<T> row1, Silk.NET.Maths.Vector3<T> row2, Silk.NET.Maths.Vector3<T> row3) -> void
Silk.NET.Maths.Matrix3x3<T>.Matrix3x3(T m11, T m12, T m13, T m21, T m22, T m23, T m31, T m32, T m33) -> void
Silk.NET.Maths.Matrix3x3<T>.Row1 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x3<T>.Row2 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x3<T>.Row3 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x3<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix3x3<T>.this[int i].get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x4
Silk.NET.Maths.Matrix3x4<T>
Silk.NET.Maths.Matrix3x4<T>.Column1.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x4<T>.Column2.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x4<T>.Column3.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x4<T>.Column4.get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix3x4<T>.Equals(Silk.NET.Maths.Matrix3x4<T> other) -> bool
Silk.NET.Maths.Matrix3x4<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix3x4<T>.M11.get -> T
Silk.NET.Maths.Matrix3x4<T>.M11.set -> void
Silk.NET.Maths.Matrix3x4<T>.M12.get -> T
Silk.NET.Maths.Matrix3x4<T>.M12.set -> void
Silk.NET.Maths.Matrix3x4<T>.M13.get -> T
Silk.NET.Maths.Matrix3x4<T>.M13.set -> void
Silk.NET.Maths.Matrix3x4<T>.M14.get -> T
Silk.NET.Maths.Matrix3x4<T>.M14.set -> void
Silk.NET.Maths.Matrix3x4<T>.M21.get -> T
Silk.NET.Maths.Matrix3x4<T>.M21.set -> void
Silk.NET.Maths.Matrix3x4<T>.M22.get -> T
Silk.NET.Maths.Matrix3x4<T>.M22.set -> void
Silk.NET.Maths.Matrix3x4<T>.M23.get -> T
Silk.NET.Maths.Matrix3x4<T>.M23.set -> void
Silk.NET.Maths.Matrix3x4<T>.M24.get -> T
Silk.NET.Maths.Matrix3x4<T>.M24.set -> void
Silk.NET.Maths.Matrix3x4<T>.M31.get -> T
Silk.NET.Maths.Matrix3x4<T>.M31.set -> void
Silk.NET.Maths.Matrix3x4<T>.M32.get -> T
Silk.NET.Maths.Matrix3x4<T>.M32.set -> void
Silk.NET.Maths.Matrix3x4<T>.M33.get -> T
Silk.NET.Maths.Matrix3x4<T>.M33.set -> void
Silk.NET.Maths.Matrix3x4<T>.M34.get -> T
Silk.NET.Maths.Matrix3x4<T>.M34.set -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4() -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(Silk.NET.Maths.Vector4<T> row1, Silk.NET.Maths.Vector4<T> row2, Silk.NET.Maths.Vector4<T> row3) -> void
Silk.NET.Maths.Matrix3x4<T>.Matrix3x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34) -> void
Silk.NET.Maths.Matrix3x4<T>.Row1 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix3x4<T>.Row2 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix3x4<T>.Row3 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix3x4<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix3x4<T>.this[int i].get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x2
Silk.NET.Maths.Matrix4x2<T>
Silk.NET.Maths.Matrix4x2<T>.Column1.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x2<T>.Column2.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x2<T>.Equals(Silk.NET.Maths.Matrix4x2<T> other) -> bool
Silk.NET.Maths.Matrix4x2<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix4x2<T>.M11.get -> T
Silk.NET.Maths.Matrix4x2<T>.M11.set -> void
Silk.NET.Maths.Matrix4x2<T>.M12.get -> T
Silk.NET.Maths.Matrix4x2<T>.M12.set -> void
Silk.NET.Maths.Matrix4x2<T>.M21.get -> T
Silk.NET.Maths.Matrix4x2<T>.M21.set -> void
Silk.NET.Maths.Matrix4x2<T>.M22.get -> T
Silk.NET.Maths.Matrix4x2<T>.M22.set -> void
Silk.NET.Maths.Matrix4x2<T>.M31.get -> T
Silk.NET.Maths.Matrix4x2<T>.M31.set -> void
Silk.NET.Maths.Matrix4x2<T>.M32.get -> T
Silk.NET.Maths.Matrix4x2<T>.M32.set -> void
Silk.NET.Maths.Matrix4x2<T>.M41.get -> T
Silk.NET.Maths.Matrix4x2<T>.M41.set -> void
Silk.NET.Maths.Matrix4x2<T>.M42.get -> T
Silk.NET.Maths.Matrix4x2<T>.M42.set -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2() -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(Silk.NET.Maths.Vector2<T> row1, Silk.NET.Maths.Vector2<T> row2, Silk.NET.Maths.Vector2<T> row3, Silk.NET.Maths.Vector2<T> row4) -> void
Silk.NET.Maths.Matrix4x2<T>.Matrix4x2(T m11, T m12, T m21, T m22, T m31, T m32, T m41, T m42) -> void
Silk.NET.Maths.Matrix4x2<T>.Row1 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix4x2<T>.Row2 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix4x2<T>.Row3 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix4x2<T>.Row4 -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix4x2<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix4x2<T>.this[int i].get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Matrix4x3
Silk.NET.Maths.Matrix4x3<T>
Silk.NET.Maths.Matrix4x3<T>.Column1.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x3<T>.Column2.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x3<T>.Column3.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x3<T>.Equals(Silk.NET.Maths.Matrix4x3<T> other) -> bool
Silk.NET.Maths.Matrix4x3<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix4x3<T>.M11.get -> T
Silk.NET.Maths.Matrix4x3<T>.M11.set -> void
Silk.NET.Maths.Matrix4x3<T>.M12.get -> T
Silk.NET.Maths.Matrix4x3<T>.M12.set -> void
Silk.NET.Maths.Matrix4x3<T>.M13.get -> T
Silk.NET.Maths.Matrix4x3<T>.M13.set -> void
Silk.NET.Maths.Matrix4x3<T>.M21.get -> T
Silk.NET.Maths.Matrix4x3<T>.M21.set -> void
Silk.NET.Maths.Matrix4x3<T>.M22.get -> T
Silk.NET.Maths.Matrix4x3<T>.M22.set -> void
Silk.NET.Maths.Matrix4x3<T>.M23.get -> T
Silk.NET.Maths.Matrix4x3<T>.M23.set -> void
Silk.NET.Maths.Matrix4x3<T>.M31.get -> T
Silk.NET.Maths.Matrix4x3<T>.M31.set -> void
Silk.NET.Maths.Matrix4x3<T>.M32.get -> T
Silk.NET.Maths.Matrix4x3<T>.M32.set -> void
Silk.NET.Maths.Matrix4x3<T>.M33.get -> T
Silk.NET.Maths.Matrix4x3<T>.M33.set -> void
Silk.NET.Maths.Matrix4x3<T>.M41.get -> T
Silk.NET.Maths.Matrix4x3<T>.M41.set -> void
Silk.NET.Maths.Matrix4x3<T>.M42.get -> T
Silk.NET.Maths.Matrix4x3<T>.M42.set -> void
Silk.NET.Maths.Matrix4x3<T>.M43.get -> T
Silk.NET.Maths.Matrix4x3<T>.M43.set -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3() -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Matrix4x4<T> value) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(Silk.NET.Maths.Vector3<T> row1, Silk.NET.Maths.Vector3<T> row2, Silk.NET.Maths.Vector3<T> row3, Silk.NET.Maths.Vector3<T> row4) -> void
Silk.NET.Maths.Matrix4x3<T>.Matrix4x3(T m11, T m12, T m13, T m21, T m22, T m23, T m31, T m32, T m33, T m41, T m42, T m43) -> void
Silk.NET.Maths.Matrix4x3<T>.Row1 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix4x3<T>.Row2 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix4x3<T>.Row3 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix4x3<T>.Row4 -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix4x3<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix4x3<T>.this[int i].get -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Matrix4x4
Silk.NET.Maths.Matrix4x4<T>
Silk.NET.Maths.Matrix4x4<T>.Column1.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Column2.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Column3.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Column4.get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Equals(Silk.NET.Maths.Matrix4x4<T> other) -> bool
Silk.NET.Maths.Matrix4x4<T>.GetDeterminant() -> T
Silk.NET.Maths.Matrix4x4<T>.IsIdentity.get -> bool
Silk.NET.Maths.Matrix4x4<T>.M11.get -> T
Silk.NET.Maths.Matrix4x4<T>.M11.set -> void
Silk.NET.Maths.Matrix4x4<T>.M12.get -> T
Silk.NET.Maths.Matrix4x4<T>.M12.set -> void
Silk.NET.Maths.Matrix4x4<T>.M13.get -> T
Silk.NET.Maths.Matrix4x4<T>.M13.set -> void
Silk.NET.Maths.Matrix4x4<T>.M14.get -> T
Silk.NET.Maths.Matrix4x4<T>.M14.set -> void
Silk.NET.Maths.Matrix4x4<T>.M21.get -> T
Silk.NET.Maths.Matrix4x4<T>.M21.set -> void
Silk.NET.Maths.Matrix4x4<T>.M22.get -> T
Silk.NET.Maths.Matrix4x4<T>.M22.set -> void
Silk.NET.Maths.Matrix4x4<T>.M23.get -> T
Silk.NET.Maths.Matrix4x4<T>.M23.set -> void
Silk.NET.Maths.Matrix4x4<T>.M24.get -> T
Silk.NET.Maths.Matrix4x4<T>.M24.set -> void
Silk.NET.Maths.Matrix4x4<T>.M31.get -> T
Silk.NET.Maths.Matrix4x4<T>.M31.set -> void
Silk.NET.Maths.Matrix4x4<T>.M32.get -> T
Silk.NET.Maths.Matrix4x4<T>.M32.set -> void
Silk.NET.Maths.Matrix4x4<T>.M33.get -> T
Silk.NET.Maths.Matrix4x4<T>.M33.set -> void
Silk.NET.Maths.Matrix4x4<T>.M34.get -> T
Silk.NET.Maths.Matrix4x4<T>.M34.set -> void
Silk.NET.Maths.Matrix4x4<T>.M41.get -> T
Silk.NET.Maths.Matrix4x4<T>.M41.set -> void
Silk.NET.Maths.Matrix4x4<T>.M42.get -> T
Silk.NET.Maths.Matrix4x4<T>.M42.set -> void
Silk.NET.Maths.Matrix4x4<T>.M43.get -> T
Silk.NET.Maths.Matrix4x4<T>.M43.set -> void
Silk.NET.Maths.Matrix4x4<T>.M44.get -> T
Silk.NET.Maths.Matrix4x4<T>.M44.set -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4() -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Matrix2x4<T> value) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Matrix3x2<T> value) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Matrix3x3<T> value) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Matrix3x4<T> value) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Matrix4x2<T> value) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Matrix4x3<T> value) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(Silk.NET.Maths.Vector4<T> row1, Silk.NET.Maths.Vector4<T> row2, Silk.NET.Maths.Vector4<T> row3, Silk.NET.Maths.Vector4<T> row4) -> void
Silk.NET.Maths.Matrix4x4<T>.Matrix4x4(T m11, T m12, T m13, T m14, T m21, T m22, T m23, T m24, T m31, T m32, T m33, T m34, T m41, T m42, T m43, T m44) -> void
Silk.NET.Maths.Matrix4x4<T>.Row1 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Row2 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Row3 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.Row4 -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Matrix4x4<T>.this[int i, int j].get -> T
Silk.NET.Maths.Matrix4x4<T>.this[int i].get -> Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Plane
Silk.NET.Maths.Plane<T>
Silk.NET.Maths.Plane<T>.Distance -> T
Silk.NET.Maths.Plane<T>.Equals(Silk.NET.Maths.Plane<T> other) -> bool
Silk.NET.Maths.Plane<T>.Normal -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Plane<T>.Plane() -> void
Silk.NET.Maths.Plane<T>.Plane(Silk.NET.Maths.Vector3<T> normal, T distance) -> void
Silk.NET.Maths.Plane<T>.Plane(Silk.NET.Maths.Vector4<T> value) -> void
Silk.NET.Maths.Plane<T>.Plane(T x, T y, T z, T distance) -> void
Silk.NET.Maths.Quaternion<T>
Silk.NET.Maths.Quaternion<T>.Equals(Silk.NET.Maths.Quaternion<T> other) -> bool
Silk.NET.Maths.Quaternion<T>.IsIdentity.get -> bool
Silk.NET.Maths.Quaternion<T>.Length() -> T
Silk.NET.Maths.Quaternion<T>.LengthSquared() -> T
Silk.NET.Maths.Quaternion<T>.Quaternion() -> void
Silk.NET.Maths.Quaternion<T>.Quaternion(Silk.NET.Maths.Vector3<T> vectorPart, T scalarPart) -> void
Silk.NET.Maths.Quaternion<T>.Quaternion(T x, T y, T z, T w) -> void
Silk.NET.Maths.Quaternion<T>.W -> T
Silk.NET.Maths.Quaternion<T>.X -> T
Silk.NET.Maths.Quaternion<T>.Y -> T
Silk.NET.Maths.Quaternion<T>.Z -> T
Silk.NET.Maths.Ray2<T>
Silk.NET.Maths.Ray2<T>.Direction -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Ray2<T>.Equals(Silk.NET.Maths.Ray2<T> other) -> bool
Silk.NET.Maths.Ray2<T>.GetPoint(T distance) -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Ray2<T>.Origin -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Ray2<T>.Ray2() -> void
Silk.NET.Maths.Ray2<T>.Ray2(Silk.NET.Maths.Vector2<T> origin, Silk.NET.Maths.Vector2<T> direction) -> void
Silk.NET.Maths.Ray3<T>
Silk.NET.Maths.Ray3<T>.Direction -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Ray3<T>.Equals(Silk.NET.Maths.Ray3<T> other) -> bool
Silk.NET.Maths.Ray3<T>.GetPoint(T distance) -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Ray3<T>.Origin -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Ray3<T>.Ray3() -> void
Silk.NET.Maths.Ray3<T>.Ray3(Silk.NET.Maths.Vector3<T> origin, Silk.NET.Maths.Vector3<T> direction) -> void
Silk.NET.Maths.Rectangle<T>
Silk.NET.Maths.Rectangle<T>.Center.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Rectangle<T>.Contains(Silk.NET.Maths.Rectangle<T> other) -> bool
Silk.NET.Maths.Rectangle<T>.Contains(Silk.NET.Maths.Vector2<T> point) -> bool
Silk.NET.Maths.Rectangle<T>.Equals(Silk.NET.Maths.Rectangle<T> other) -> bool
Silk.NET.Maths.Rectangle<T>.GetDistanceToNearestEdge(Silk.NET.Maths.Vector2<T> point) -> T
Silk.NET.Maths.Rectangle<T>.GetInflated(Silk.NET.Maths.Vector2<T> point) -> Silk.NET.Maths.Rectangle<T>
Silk.NET.Maths.Rectangle<T>.GetScaled(Silk.NET.Maths.Vector2<T> scale, Silk.NET.Maths.Vector2<T> anchor) -> Silk.NET.Maths.Rectangle<T>
Silk.NET.Maths.Rectangle<T>.GetTranslated(Silk.NET.Maths.Vector2<T> distance) -> Silk.NET.Maths.Rectangle<T>
Silk.NET.Maths.Rectangle<T>.HalfSize.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Rectangle<T>.Max.get -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Rectangle<T>.Origin -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Rectangle<T>.Rectangle() -> void
Silk.NET.Maths.Rectangle<T>.Rectangle(Silk.NET.Maths.Vector2<T> origin, Silk.NET.Maths.Vector2<T> size) -> void
Silk.NET.Maths.Rectangle<T>.Size -> Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Scalar
Silk.NET.Maths.Scalar<T>
Silk.NET.Maths.Sphere<T>
Silk.NET.Maths.Sphere<T>.Center -> Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Sphere<T>.Contains(Silk.NET.Maths.Sphere<T> other) -> bool
Silk.NET.Maths.Sphere<T>.Contains(Silk.NET.Maths.Vector3<T> point) -> bool
Silk.NET.Maths.Sphere<T>.Diameter.get -> T
Silk.NET.Maths.Sphere<T>.Equals(Silk.NET.Maths.Sphere<T> other) -> bool
Silk.NET.Maths.Sphere<T>.GetDistanceToNearestEdge(Silk.NET.Maths.Vector3<T> point) -> T
Silk.NET.Maths.Sphere<T>.GetDistanceToNearestEdgeSquared(Silk.NET.Maths.Vector3<T> point) -> T
Silk.NET.Maths.Sphere<T>.GetInflated(Silk.NET.Maths.Vector3<T> point) -> Silk.NET.Maths.Sphere<T>
Silk.NET.Maths.Sphere<T>.GetTranslated(Silk.NET.Maths.Vector3<T> distance) -> Silk.NET.Maths.Sphere<T>
Silk.NET.Maths.Sphere<T>.Radius -> T
Silk.NET.Maths.Sphere<T>.Sphere() -> void
Silk.NET.Maths.Sphere<T>.Sphere(Silk.NET.Maths.Vector3<T> center, T radius) -> void
Silk.NET.Maths.Sphere<T>.SquaredRadius.get -> T
Silk.NET.Maths.SystemNumericsExtensions
Silk.NET.Maths.Vector2
Silk.NET.Maths.Vector2<T>
Silk.NET.Maths.Vector2<T>.CopyTo(T[]? array) -> void
Silk.NET.Maths.Vector2<T>.CopyTo(T[]? array, int index) -> void
Silk.NET.Maths.Vector2<T>.Equals(Silk.NET.Maths.Vector2<T> other) -> bool
Silk.NET.Maths.Vector2<T>.Length.get -> T
Silk.NET.Maths.Vector2<T>.LengthSquared.get -> T
Silk.NET.Maths.Vector2<T>.this[int i].get -> T
Silk.NET.Maths.Vector2<T>.ToString(string? format) -> string!
Silk.NET.Maths.Vector2<T>.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Silk.NET.Maths.Vector2<T>.Vector2() -> void
Silk.NET.Maths.Vector2<T>.Vector2(T value) -> void
Silk.NET.Maths.Vector2<T>.Vector2(T x, T y) -> void
Silk.NET.Maths.Vector2<T>.X -> T
Silk.NET.Maths.Vector2<T>.Y -> T
Silk.NET.Maths.Vector3
Silk.NET.Maths.Vector3<T>
Silk.NET.Maths.Vector3<T>.CopyTo(T[]? array) -> void
Silk.NET.Maths.Vector3<T>.CopyTo(T[]? array, int index) -> void
Silk.NET.Maths.Vector3<T>.Equals(Silk.NET.Maths.Vector3<T> other) -> bool
Silk.NET.Maths.Vector3<T>.Length.get -> T
Silk.NET.Maths.Vector3<T>.LengthSquared.get -> T
Silk.NET.Maths.Vector3<T>.this[int i].get -> T
Silk.NET.Maths.Vector3<T>.ToString(string? format) -> string!
Silk.NET.Maths.Vector3<T>.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Silk.NET.Maths.Vector3<T>.Vector3() -> void
Silk.NET.Maths.Vector3<T>.Vector3(Silk.NET.Maths.Vector2<T> value, T z) -> void
Silk.NET.Maths.Vector3<T>.Vector3(T value) -> void
Silk.NET.Maths.Vector3<T>.Vector3(T x, T y, T z) -> void
Silk.NET.Maths.Vector3<T>.X -> T
Silk.NET.Maths.Vector3<T>.Y -> T
Silk.NET.Maths.Vector3<T>.Z -> T
Silk.NET.Maths.Vector4
Silk.NET.Maths.Vector4<T>
Silk.NET.Maths.Vector4<T>.CopyTo(T[]? array) -> void
Silk.NET.Maths.Vector4<T>.CopyTo(T[]? array, int index) -> void
Silk.NET.Maths.Vector4<T>.Equals(Silk.NET.Maths.Vector4<T> other) -> bool
Silk.NET.Maths.Vector4<T>.Length.get -> T
Silk.NET.Maths.Vector4<T>.LengthSquared.get -> T
Silk.NET.Maths.Vector4<T>.this[int i].get -> T
Silk.NET.Maths.Vector4<T>.ToString(string? format) -> string!
Silk.NET.Maths.Vector4<T>.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Silk.NET.Maths.Vector4<T>.Vector4() -> void
Silk.NET.Maths.Vector4<T>.Vector4(Silk.NET.Maths.Vector2<T> value, T z, T w) -> void
Silk.NET.Maths.Vector4<T>.Vector4(Silk.NET.Maths.Vector3<T> value, T w) -> void
Silk.NET.Maths.Vector4<T>.Vector4(T value) -> void
Silk.NET.Maths.Vector4<T>.Vector4(T x, T y, T z, T w) -> void
Silk.NET.Maths.Vector4<T>.W -> T
Silk.NET.Maths.Vector4<T>.X -> T
Silk.NET.Maths.Vector4<T>.Y -> T
Silk.NET.Maths.Vector4<T>.Z -> T
static readonly Silk.NET.Maths.Scalar<T>.E -> T
static readonly Silk.NET.Maths.Scalar<T>.Epsilon -> T
static readonly Silk.NET.Maths.Scalar<T>.MaxValue -> T
static readonly Silk.NET.Maths.Scalar<T>.MinusOne -> T
static readonly Silk.NET.Maths.Scalar<T>.MinusTwo -> T
static readonly Silk.NET.Maths.Scalar<T>.MinValue -> T
static readonly Silk.NET.Maths.Scalar<T>.NaN -> T
static readonly Silk.NET.Maths.Scalar<T>.NegativeInfinity -> T
static readonly Silk.NET.Maths.Scalar<T>.One -> T
static readonly Silk.NET.Maths.Scalar<T>.Pi -> T
static readonly Silk.NET.Maths.Scalar<T>.PiOver2 -> T
static readonly Silk.NET.Maths.Scalar<T>.PositiveInfinity -> T
static readonly Silk.NET.Maths.Scalar<T>.Tau -> T
static readonly Silk.NET.Maths.Scalar<T>.Two -> T
static readonly Silk.NET.Maths.Scalar<T>.Zero -> T
static Silk.NET.Maths.Box2<T>.operator !=(Silk.NET.Maths.Box2<T> value1, Silk.NET.Maths.Box2<T> value2) -> bool
static Silk.NET.Maths.Box2<T>.operator ==(Silk.NET.Maths.Box2<T> value1, Silk.NET.Maths.Box2<T> value2) -> bool
static Silk.NET.Maths.Box3<T>.operator !=(Silk.NET.Maths.Box3<T> value1, Silk.NET.Maths.Box3<T> value2) -> bool
static Silk.NET.Maths.Box3<T>.operator ==(Silk.NET.Maths.Box3<T> value1, Silk.NET.Maths.Box3<T> value2) -> bool
static Silk.NET.Maths.Circle<T>.operator !=(Silk.NET.Maths.Circle<T> value1, Silk.NET.Maths.Circle<T> value2) -> bool
static Silk.NET.Maths.Circle<T>.operator ==(Silk.NET.Maths.Circle<T> value1, Silk.NET.Maths.Circle<T> value2) -> bool
static Silk.NET.Maths.Cube<T>.operator !=(Silk.NET.Maths.Cube<T> value1, Silk.NET.Maths.Cube<T> value2) -> bool
static Silk.NET.Maths.Cube<T>.operator ==(Silk.NET.Maths.Cube<T> value1, Silk.NET.Maths.Cube<T> value2) -> bool
static Silk.NET.Maths.Matrix2x2.Add<T>(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2.Lerp<T>(Silk.NET.Maths.Matrix2x2<T> matrix1, Silk.NET.Maths.Matrix2x2<T> matrix2, T amount) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2.Multiply<T>(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2.Multiply<T>(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x2.Multiply<T>(Silk.NET.Maths.Matrix2x2<T> value1, T value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2.Multiply<T>(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix2x2.Multiply<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Matrix2x2.Negate<T>(Silk.NET.Maths.Matrix2x2<T> value) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2.Subtract<T>(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<byte>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<byte>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<decimal>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<decimal>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<double>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<double>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<float>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<float>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<int>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<int>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<long>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<long>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<sbyte>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<sbyte>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<short>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<short>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<System.Half>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<System.Half>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<uint>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<uint>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<ulong>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<ulong>
static Silk.NET.Maths.Matrix2x2<T>.explicit operator Silk.NET.Maths.Matrix2x2<ushort>(Silk.NET.Maths.Matrix2x2<T> from) -> Silk.NET.Maths.Matrix2x2<ushort>
static Silk.NET.Maths.Matrix2x2<T>.Identity.get -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator !=(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> bool
static Silk.NET.Maths.Matrix2x2<T>.operator *(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator *(Silk.NET.Maths.Matrix2x2<T> value1, T value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator *(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator +(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator -(Silk.NET.Maths.Matrix2x2<T> value) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator -(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x2<T>.operator ==(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> bool
static Silk.NET.Maths.Matrix2x3.Add<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.CreateBillboard<T>(Silk.NET.Maths.Vector3<T> objectPosition, Silk.NET.Maths.Vector3<T> cameraPosition, Silk.NET.Maths.Vector3<T> cameraUpVector, Silk.NET.Maths.Vector3<T> cameraForwardVector) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.CreateFromAxisAngle<T>(Silk.NET.Maths.Vector3<T> axis, T angle) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.CreateFromQuaternion<T>(Silk.NET.Maths.Quaternion<T> quaternion) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.CreateFromYawPitchRoll<T>(T yaw, T pitch, T roll) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Lerp<T>(Silk.NET.Maths.Matrix2x3<T> matrix1, Silk.NET.Maths.Matrix2x3<T> matrix2, T amount) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Multiply<T>(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Multiply<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x3.Multiply<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Multiply<T>(Silk.NET.Maths.Matrix2x3<T> value1, T value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Multiply<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Matrix2x3.Negate<T>(Silk.NET.Maths.Matrix2x3<T> value) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Subtract<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3.Transform<T>(Silk.NET.Maths.Matrix2x3<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<byte>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<byte>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<decimal>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<decimal>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<double>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<double>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<float>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<float>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<int>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<int>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<long>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<long>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<sbyte>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<sbyte>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<short>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<short>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<System.Half>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<System.Half>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<uint>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<uint>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<ulong>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<ulong>
static Silk.NET.Maths.Matrix2x3<T>.explicit operator Silk.NET.Maths.Matrix2x3<ushort>(Silk.NET.Maths.Matrix2x3<T> from) -> Silk.NET.Maths.Matrix2x3<ushort>
static Silk.NET.Maths.Matrix2x3<T>.Identity.get -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator !=(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> bool
static Silk.NET.Maths.Matrix2x3<T>.operator *(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator *(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x3<T>.operator *(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator *(Silk.NET.Maths.Matrix2x3<T> value1, T value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator *(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator +(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator -(Silk.NET.Maths.Matrix2x3<T> value) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator -(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x3<T>.operator ==(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> bool
static Silk.NET.Maths.Matrix2x4.Add<T>(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4.Lerp<T>(Silk.NET.Maths.Matrix2x4<T> matrix1, Silk.NET.Maths.Matrix2x4<T> matrix2, T amount) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix2x4.Multiply<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<byte>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<byte>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<decimal>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<decimal>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<double>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<double>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<float>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<float>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<int>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<int>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<long>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<long>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<sbyte>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<sbyte>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<short>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<short>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<System.Half>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<System.Half>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<uint>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<uint>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<ulong>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<ulong>
static Silk.NET.Maths.Matrix2x4<T>.explicit operator Silk.NET.Maths.Matrix2x4<ushort>(Silk.NET.Maths.Matrix2x4<T> from) -> Silk.NET.Maths.Matrix2x4<ushort>
static Silk.NET.Maths.Matrix2x4<T>.Identity.get -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator !=(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> bool
static Silk.NET.Maths.Matrix2x4<T>.operator *(Silk.NET.Maths.Matrix2x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator *(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix2x4<T>.operator *(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator *(Silk.NET.Maths.Matrix2x4<T> value1, T value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator *(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator *(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator +(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator -(Silk.NET.Maths.Matrix2x4<T> value) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator -(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix2x4<T>.operator ==(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> bool
static Silk.NET.Maths.Matrix3x2.Add<T>(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateRotation<T>(T radians) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateRotation<T>(T radians, Silk.NET.Maths.Vector2<T> centerPoint) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateScale<T>(Silk.NET.Maths.Vector2<T> scales) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateScale<T>(Silk.NET.Maths.Vector2<T> scales, Silk.NET.Maths.Vector2<T> centerPoint) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateScale<T>(T scale) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateScale<T>(T scale, Silk.NET.Maths.Vector2<T> centerPoint) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateScale<T>(T xScale, T yScale) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateScale<T>(T xScale, T yScale, Silk.NET.Maths.Vector2<T> centerPoint) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateSkew<T>(T radiansX, T radiansY) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateSkew<T>(T radiansX, T radiansY, Silk.NET.Maths.Vector2<T> centerPoint) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateTranslation<T>(Silk.NET.Maths.Vector2<T> position) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.CreateTranslation<T>(T xPosition, T yPosition) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.Invert<T>(Silk.NET.Maths.Matrix3x2<T> matrix, out Silk.NET.Maths.Matrix3x2<T> result) -> bool
static Silk.NET.Maths.Matrix3x2.Lerp<T>(Silk.NET.Maths.Matrix3x2<T> matrix1, Silk.NET.Maths.Matrix3x2<T> matrix2, T amount) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.Multiply<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix3x2.Multiply<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix3x2.Multiply<T>(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.Multiply<T>(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x2.Multiply<T>(Silk.NET.Maths.Matrix3x2<T> value1, T value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.Multiply<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Matrix3x2.Negate<T>(Silk.NET.Maths.Matrix3x2<T> value) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2.Subtract<T>(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<byte>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<byte>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<decimal>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<decimal>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<double>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<double>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<float>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<float>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<int>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<int>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<long>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<long>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<sbyte>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<sbyte>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<short>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<short>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<System.Half>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<System.Half>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<uint>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<uint>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<ulong>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<ulong>
static Silk.NET.Maths.Matrix3x2<T>.explicit operator Silk.NET.Maths.Matrix3x2<ushort>(Silk.NET.Maths.Matrix3x2<T> from) -> Silk.NET.Maths.Matrix3x2<ushort>
static Silk.NET.Maths.Matrix3x2<T>.Identity.get -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator !=(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> bool
static Silk.NET.Maths.Matrix3x2<T>.operator *(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator *(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x2<T>.operator *(Silk.NET.Maths.Matrix3x2<T> value1, T value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator *(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator *(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator +(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator -(Silk.NET.Maths.Matrix3x2<T> value) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator -(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x2<T>.operator ==(Silk.NET.Maths.Matrix3x2<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> bool
static Silk.NET.Maths.Matrix3x3.Add<T>(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateBillboard<T>(Silk.NET.Maths.Vector3<T> objectPosition, Silk.NET.Maths.Vector3<T> cameraPosition, Silk.NET.Maths.Vector3<T> cameraUpVector, Silk.NET.Maths.Vector3<T> cameraForwardVector) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateFromAxisAngle<T>(Silk.NET.Maths.Vector3<T> axis, T angle) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateFromQuaternion<T>(Silk.NET.Maths.Quaternion<T> quaternion) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateFromYawPitchRoll<T>(T yaw, T pitch, T roll) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateRotationX<T>(T radians) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateRotationY<T>(T radians) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateRotationZ<T>(T radians) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateScale<T>(Silk.NET.Maths.Vector3<T> scales) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateScale<T>(T scale) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.CreateScale<T>(T xScale, T yScale, T zScale) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Decompose<T>(Silk.NET.Maths.Matrix3x3<T> matrix, out Silk.NET.Maths.Vector3<T> scale, out Silk.NET.Maths.Quaternion<T> rotation) -> bool
static Silk.NET.Maths.Matrix3x3.Lerp<T>(Silk.NET.Maths.Matrix3x3<T> matrix1, Silk.NET.Maths.Matrix3x3<T> matrix2, T amount) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Matrix2x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix2x3<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Matrix3x3<T> value1, T value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix3x3.Multiply<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Matrix3x3.Negate<T>(Silk.NET.Maths.Matrix3x3<T> value) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Subtract<T>(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Transform<T>(Silk.NET.Maths.Matrix3x3<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3.Transpose<T>(Silk.NET.Maths.Matrix3x3<T> matrix) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<byte>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<byte>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<decimal>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<decimal>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<double>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<double>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<float>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<float>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<int>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<int>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<long>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<long>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<sbyte>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<sbyte>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<short>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<short>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<System.Half>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<System.Half>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<uint>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<uint>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<ulong>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<ulong>
static Silk.NET.Maths.Matrix3x3<T>.explicit operator Silk.NET.Maths.Matrix3x3<ushort>(Silk.NET.Maths.Matrix3x3<T> from) -> Silk.NET.Maths.Matrix3x3<ushort>
static Silk.NET.Maths.Matrix3x3<T>.Identity.get -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator !=(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> bool
static Silk.NET.Maths.Matrix3x3<T>.operator *(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator *(Silk.NET.Maths.Matrix3x3<T> value1, T value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator *(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator +(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator -(Silk.NET.Maths.Matrix3x3<T> value) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator -(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x3<T>.operator ==(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> bool
static Silk.NET.Maths.Matrix3x4.Add<T>(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4.Lerp<T>(Silk.NET.Maths.Matrix3x4<T> matrix1, Silk.NET.Maths.Matrix3x4<T> matrix2, T amount) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4.Multiply<T>(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4.Multiply<T>(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x4.Multiply<T>(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4.Multiply<T>(Silk.NET.Maths.Matrix3x4<T> value1, T value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4.Multiply<T>(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix3x4.Multiply<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Matrix3x4.Negate<T>(Silk.NET.Maths.Matrix3x4<T> value) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4.Subtract<T>(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<byte>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<byte>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<decimal>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<decimal>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<double>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<double>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<float>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<float>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<int>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<int>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<long>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<long>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<sbyte>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<sbyte>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<short>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<short>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<System.Half>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<System.Half>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<uint>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<uint>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<ulong>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<ulong>
static Silk.NET.Maths.Matrix3x4<T>.explicit operator Silk.NET.Maths.Matrix3x4<ushort>(Silk.NET.Maths.Matrix3x4<T> from) -> Silk.NET.Maths.Matrix3x4<ushort>
static Silk.NET.Maths.Matrix3x4<T>.Identity.get -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator !=(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> bool
static Silk.NET.Maths.Matrix3x4<T>.operator *(Silk.NET.Maths.Matrix3x3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator *(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix3x4<T>.operator *(Silk.NET.Maths.Matrix3x4<T> value1, T value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator *(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator +(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator -(Silk.NET.Maths.Matrix3x4<T> value) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator -(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix3x4<T>.operator ==(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> bool
static Silk.NET.Maths.Matrix4x2.Add<T>(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2.Lerp<T>(Silk.NET.Maths.Matrix4x2<T> matrix1, Silk.NET.Maths.Matrix4x2<T> matrix2, T amount) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2.Multiply<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Matrix4x2.Negate<T>(Silk.NET.Maths.Matrix4x2<T> value) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2.Subtract<T>(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<byte>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<byte>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<decimal>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<decimal>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<double>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<double>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<float>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<float>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<int>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<int>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<long>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<long>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<sbyte>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<sbyte>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<short>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<short>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<System.Half>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<System.Half>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<uint>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<uint>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<ulong>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<ulong>
static Silk.NET.Maths.Matrix4x2<T>.explicit operator Silk.NET.Maths.Matrix4x2<ushort>(Silk.NET.Maths.Matrix4x2<T> from) -> Silk.NET.Maths.Matrix4x2<ushort>
static Silk.NET.Maths.Matrix4x2<T>.Identity.get -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator !=(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> bool
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix2x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix3x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix4x2<T> value1, T value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator *(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator +(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator -(Silk.NET.Maths.Matrix4x2<T> value) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator -(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x2<T>.operator ==(Silk.NET.Maths.Matrix4x2<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> bool
static Silk.NET.Maths.Matrix4x3.Add<T>(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3.Lerp<T>(Silk.NET.Maths.Matrix4x3<T> matrix1, Silk.NET.Maths.Matrix4x3<T> matrix2, T amount) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3.Multiply<T>(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix3x3<T>
static Silk.NET.Maths.Matrix4x3.Multiply<T>(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3.Multiply<T>(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x3.Multiply<T>(Silk.NET.Maths.Matrix4x3<T> value1, T value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3.Multiply<T>(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3.Multiply<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Matrix4x3.Negate<T>(Silk.NET.Maths.Matrix4x3<T> value) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3.Subtract<T>(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<byte>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<byte>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<decimal>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<decimal>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<double>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<double>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<float>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<float>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<int>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<int>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<long>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<long>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<sbyte>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<sbyte>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<short>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<short>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<System.Half>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<System.Half>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<uint>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<uint>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<ulong>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<ulong>
static Silk.NET.Maths.Matrix4x3<T>.explicit operator Silk.NET.Maths.Matrix4x3<ushort>(Silk.NET.Maths.Matrix4x3<T> from) -> Silk.NET.Maths.Matrix4x3<ushort>
static Silk.NET.Maths.Matrix4x3<T>.Identity.get -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator !=(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> bool
static Silk.NET.Maths.Matrix4x3<T>.operator *(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator *(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x3<T>.operator *(Silk.NET.Maths.Matrix4x3<T> value1, T value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator *(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator +(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator -(Silk.NET.Maths.Matrix4x3<T> value) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator -(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x3<T>.operator ==(Silk.NET.Maths.Matrix4x3<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> bool
static Silk.NET.Maths.Matrix4x4.Add<T>(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateBillboard<T>(Silk.NET.Maths.Vector3<T> objectPosition, Silk.NET.Maths.Vector3<T> cameraPosition, Silk.NET.Maths.Vector3<T> cameraUpVector, Silk.NET.Maths.Vector3<T> cameraForwardVector) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateConstrainedBillboard<T>(Silk.NET.Maths.Vector3<T> objectPosition, Silk.NET.Maths.Vector3<T> cameraPosition, Silk.NET.Maths.Vector3<T> rotateAxis, Silk.NET.Maths.Vector3<T> cameraForwardVector, Silk.NET.Maths.Vector3<T> objectForwardVector) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateFromAxisAngle<T>(Silk.NET.Maths.Vector3<T> axis, T angle) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateFromQuaternion<T>(Silk.NET.Maths.Quaternion<T> quaternion) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateFromYawPitchRoll<T>(T yaw, T pitch, T roll) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateLookAt<T>(Silk.NET.Maths.Vector3<T> cameraPosition, Silk.NET.Maths.Vector3<T> cameraTarget, Silk.NET.Maths.Vector3<T> cameraUpVector) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateOrthographic<T>(T width, T height, T zNearPlane, T zFarPlane) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateOrthographicOffCenter<T>(T left, T right, T bottom, T top, T zNearPlane, T zFarPlane) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreatePerspective<T>(T width, T height, T nearPlaneDistance, T farPlaneDistance) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreatePerspectiveFieldOfView<T>(T fieldOfView, T aspectRatio, T nearPlaneDistance, T farPlaneDistance) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreatePerspectiveOffCenter<T>(T left, T right, T bottom, T top, T nearPlaneDistance, T farPlaneDistance) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateReflection<T>(Silk.NET.Maths.Plane<T> value) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateRotationX<T>(T radians) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateRotationX<T>(T radians, Silk.NET.Maths.Vector3<T> centerPoint) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateRotationY<T>(T radians) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateRotationY<T>(T radians, Silk.NET.Maths.Vector3<T> centerPoint) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateRotationZ<T>(T radians) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateRotationZ<T>(T radians, Silk.NET.Maths.Vector3<T> centerPoint) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateScale<T>(Silk.NET.Maths.Vector3<T> scales) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateScale<T>(Silk.NET.Maths.Vector3<T> scales, Silk.NET.Maths.Vector3<T> centerPoint) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateScale<T>(T scale) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateScale<T>(T scale, Silk.NET.Maths.Vector3<T> centerPoint) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateScale<T>(T xScale, T yScale, T zScale) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateScale<T>(T xScale, T yScale, T zScale, Silk.NET.Maths.Vector3<T> centerPoint) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateShadow<T>(Silk.NET.Maths.Vector3<T> lightDirection, Silk.NET.Maths.Plane<T> plane) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateTranslation<T>(Silk.NET.Maths.Vector3<T> position) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateTranslation<T>(T xPosition, T yPosition, T zPosition) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.CreateWorld<T>(Silk.NET.Maths.Vector3<T> position, Silk.NET.Maths.Vector3<T> forward, Silk.NET.Maths.Vector3<T> up) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Decompose<T>(Silk.NET.Maths.Matrix4x4<T> matrix, out Silk.NET.Maths.Vector3<T> scale, out Silk.NET.Maths.Quaternion<T> rotation, out Silk.NET.Maths.Vector3<T> translation) -> bool
static Silk.NET.Maths.Matrix4x4.Invert<T>(Silk.NET.Maths.Matrix4x4<T> matrix, out Silk.NET.Maths.Matrix4x4<T> result) -> bool
static Silk.NET.Maths.Matrix4x4.Lerp<T>(Silk.NET.Maths.Matrix4x4<T> matrix1, Silk.NET.Maths.Matrix4x4<T> matrix2, T amount) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Multiply<T>(Silk.NET.Maths.Matrix2x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix2x4<T>
static Silk.NET.Maths.Matrix4x4.Multiply<T>(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Matrix4x2<T>
static Silk.NET.Maths.Matrix4x4.Multiply<T>(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Multiply<T>(Silk.NET.Maths.Matrix4x4<T> value1, T value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Multiply<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Matrix4x4.Negate<T>(Silk.NET.Maths.Matrix4x4<T> value) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Subtract<T>(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Transform<T>(Silk.NET.Maths.Matrix4x4<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4.Transpose<T>(Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<byte>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<byte>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<decimal>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<decimal>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<double>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<double>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<float>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<float>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<int>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<int>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<long>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<long>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<sbyte>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<sbyte>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<short>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<short>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<System.Half>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<System.Half>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<uint>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<uint>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<ulong>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<ulong>
static Silk.NET.Maths.Matrix4x4<T>.explicit operator Silk.NET.Maths.Matrix4x4<ushort>(Silk.NET.Maths.Matrix4x4<T> from) -> Silk.NET.Maths.Matrix4x4<ushort>
static Silk.NET.Maths.Matrix4x4<T>.Identity.get -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator !=(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> bool
static Silk.NET.Maths.Matrix4x4<T>.operator *(Silk.NET.Maths.Matrix3x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix3x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator *(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Matrix4x3<T>
static Silk.NET.Maths.Matrix4x4<T>.operator *(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator *(Silk.NET.Maths.Matrix4x4<T> value1, T value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator *(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator +(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator -(Silk.NET.Maths.Matrix4x4<T> value) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator -(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Matrix4x4<T>
static Silk.NET.Maths.Matrix4x4<T>.operator ==(Silk.NET.Maths.Matrix4x4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> bool
static Silk.NET.Maths.Plane.CreateFromVertices<T>(Silk.NET.Maths.Vector3<T> point1, Silk.NET.Maths.Vector3<T> point2, Silk.NET.Maths.Vector3<T> point3) -> Silk.NET.Maths.Plane<T>
static Silk.NET.Maths.Plane.Dot<T>(Silk.NET.Maths.Plane<T> plane, Silk.NET.Maths.Vector4<T> value) -> T
static Silk.NET.Maths.Plane.DotCoordinate<T>(Silk.NET.Maths.Plane<T> plane, Silk.NET.Maths.Vector3<T> value) -> T
static Silk.NET.Maths.Plane.DotNormal<T>(Silk.NET.Maths.Plane<T> plane, Silk.NET.Maths.Vector3<T> value) -> T
static Silk.NET.Maths.Plane.Normalize<T>(Silk.NET.Maths.Plane<T> value) -> Silk.NET.Maths.Plane<T>
static Silk.NET.Maths.Plane.Transform<T>(Silk.NET.Maths.Plane<T> plane, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Plane<T>
static Silk.NET.Maths.Plane.Transform<T>(Silk.NET.Maths.Plane<T> plane, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Plane<T>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<byte>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<byte>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<decimal>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<decimal>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<double>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<double>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<float>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<float>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<int>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<int>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<long>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<long>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<sbyte>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<sbyte>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<short>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<short>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<System.Half>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<System.Half>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<uint>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<uint>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<ulong>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<ulong>
static Silk.NET.Maths.Plane<T>.explicit operator Silk.NET.Maths.Plane<ushort>(Silk.NET.Maths.Plane<T> from) -> Silk.NET.Maths.Plane<ushort>
static Silk.NET.Maths.Plane<T>.operator !=(Silk.NET.Maths.Plane<T> value1, Silk.NET.Maths.Plane<T> value2) -> bool
static Silk.NET.Maths.Plane<T>.operator ==(Silk.NET.Maths.Plane<T> value1, Silk.NET.Maths.Plane<T> value2) -> bool
static Silk.NET.Maths.Quaternion<T>.Add(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Concatenate(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Conjugate(Silk.NET.Maths.Quaternion<T> value) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.CreateFromAxisAngle(Silk.NET.Maths.Vector3<T> axis, T angle) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.CreateFromRotationMatrix(Silk.NET.Maths.Matrix3x3<T> matrix) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.CreateFromRotationMatrix(Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.CreateFromYawPitchRoll(T yaw, T pitch, T roll) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Divide(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Dot(Silk.NET.Maths.Quaternion<T> quaternion1, Silk.NET.Maths.Quaternion<T> quaternion2) -> T
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<byte>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<byte>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<decimal>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<decimal>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<double>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<double>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<float>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<float>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<int>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<int>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<long>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<long>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<sbyte>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<sbyte>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<short>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<short>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<System.Half>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<System.Half>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<uint>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<uint>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<ulong>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<ulong>
static Silk.NET.Maths.Quaternion<T>.explicit operator Silk.NET.Maths.Quaternion<ushort>(Silk.NET.Maths.Quaternion<T> from) -> Silk.NET.Maths.Quaternion<ushort>
static Silk.NET.Maths.Quaternion<T>.Identity.get -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Inverse(Silk.NET.Maths.Quaternion<T> value) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Lerp(Silk.NET.Maths.Quaternion<T> quaternion1, Silk.NET.Maths.Quaternion<T> quaternion2, T amount) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Multiply(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Multiply(Silk.NET.Maths.Quaternion<T> value1, T value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Negate(Silk.NET.Maths.Quaternion<T> value) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Normalize(Silk.NET.Maths.Quaternion<T> value) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator !=(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> bool
static Silk.NET.Maths.Quaternion<T>.operator *(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator *(Silk.NET.Maths.Quaternion<T> value1, T value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator +(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator -(Silk.NET.Maths.Quaternion<T> value) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator -(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator /(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.operator ==(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> bool
static Silk.NET.Maths.Quaternion<T>.Slerp(Silk.NET.Maths.Quaternion<T> quaternion1, Silk.NET.Maths.Quaternion<T> quaternion2, T amount) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Quaternion<T>.Subtract(Silk.NET.Maths.Quaternion<T> value1, Silk.NET.Maths.Quaternion<T> value2) -> Silk.NET.Maths.Quaternion<T>
static Silk.NET.Maths.Ray2<T>.operator !=(Silk.NET.Maths.Ray2<T> value1, Silk.NET.Maths.Ray2<T> value2) -> bool
static Silk.NET.Maths.Ray2<T>.operator ==(Silk.NET.Maths.Ray2<T> value1, Silk.NET.Maths.Ray2<T> value2) -> bool
static Silk.NET.Maths.Ray3<T>.operator !=(Silk.NET.Maths.Ray3<T> value1, Silk.NET.Maths.Ray3<T> value2) -> bool
static Silk.NET.Maths.Ray3<T>.operator ==(Silk.NET.Maths.Ray3<T> value1, Silk.NET.Maths.Ray3<T> value2) -> bool
static Silk.NET.Maths.Rectangle<T>.operator !=(Silk.NET.Maths.Rectangle<T> value1, Silk.NET.Maths.Rectangle<T> value2) -> bool
static Silk.NET.Maths.Rectangle<T>.operator ==(Silk.NET.Maths.Rectangle<T> value1, Silk.NET.Maths.Rectangle<T> value2) -> bool
static Silk.NET.Maths.Scalar.Abs<T>(T x) -> T
static Silk.NET.Maths.Scalar.Acos<T>(T x) -> T
static Silk.NET.Maths.Scalar.Acosh<T>(T x) -> T
static Silk.NET.Maths.Scalar.Add<T>(T left, T right) -> T
static Silk.NET.Maths.Scalar.As<TFrom, TTo>(TFrom val) -> TTo
static Silk.NET.Maths.Scalar.Asin<T>(T x) -> T
static Silk.NET.Maths.Scalar.Asinh<T>(T x) -> T
static Silk.NET.Maths.Scalar.Atan2<T>(T y, T x) -> T
static Silk.NET.Maths.Scalar.Atan<T>(T x) -> T
static Silk.NET.Maths.Scalar.Atanh<T>(T x) -> T
static Silk.NET.Maths.Scalar.Cbrt<T>(T x) -> T
static Silk.NET.Maths.Scalar.Ceiling<T>(T x) -> T
static Silk.NET.Maths.Scalar.Cos<T>(T x) -> T
static Silk.NET.Maths.Scalar.Cosh<T>(T x) -> T
static Silk.NET.Maths.Scalar.Divide<T>(T left, T right) -> T
static Silk.NET.Maths.Scalar.Equal<T>(T left, T right) -> bool
static Silk.NET.Maths.Scalar.Exp<T>(T x) -> T
static Silk.NET.Maths.Scalar.Floor<T>(T x) -> T
static Silk.NET.Maths.Scalar.GreaterThan<T>(T left, T right) -> bool
static Silk.NET.Maths.Scalar.GreaterThanOrEqual<T>(T left, T right) -> bool
static Silk.NET.Maths.Scalar.IEEERemainder<T>(T x, T y) -> T
static Silk.NET.Maths.Scalar.IsFinite<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsHardwareAccelerated.get -> bool
static Silk.NET.Maths.Scalar.IsInfinity<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsNaN<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsNegative<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsNegativeInfinity<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsNormal<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsPositiveInfinity<T>(T f) -> bool
static Silk.NET.Maths.Scalar.IsSubnormal<T>(T f) -> bool
static Silk.NET.Maths.Scalar.LessThan<T>(T left, T right) -> bool
static Silk.NET.Maths.Scalar.LessThanOrEqual<T>(T left, T right) -> bool
static Silk.NET.Maths.Scalar.Log10<T>(T x) -> T
static Silk.NET.Maths.Scalar.Log<T>(T x) -> T
static Silk.NET.Maths.Scalar.Log<T>(T x, T y) -> T
static Silk.NET.Maths.Scalar.Max<T>(T x, T y) -> T
static Silk.NET.Maths.Scalar.Min<T>(T x, T y) -> T
static Silk.NET.Maths.Scalar.Multiply<T>(T left, T right) -> T
static Silk.NET.Maths.Scalar.Negate<T>(T x) -> T
static Silk.NET.Maths.Scalar.NotEqual<T>(T left, T right) -> bool
static Silk.NET.Maths.Scalar.Pow<T>(T x, T y) -> T
static Silk.NET.Maths.Scalar.Reciprocal<T>(T x) -> T
static Silk.NET.Maths.Scalar.Round<T>(T x) -> T
static Silk.NET.Maths.Scalar.Round<T>(T x, int digits) -> T
static Silk.NET.Maths.Scalar.Round<T>(T x, int digits, System.MidpointRounding mode) -> T
static Silk.NET.Maths.Scalar.Round<T>(T x, System.MidpointRounding mode) -> T
static Silk.NET.Maths.Scalar.Sign<T>(T x) -> int
static Silk.NET.Maths.Scalar.Sin<T>(T x) -> T
static Silk.NET.Maths.Scalar.Sinh<T>(T x) -> T
static Silk.NET.Maths.Scalar.Sqrt<T>(T x) -> T
static Silk.NET.Maths.Scalar.Subtract<T>(T left, T right) -> T
static Silk.NET.Maths.Scalar.Tan<T>(T x) -> T
static Silk.NET.Maths.Scalar.Tanh<T>(T x) -> T
static Silk.NET.Maths.Scalar.Truncate<T>(T x) -> T
static Silk.NET.Maths.Sphere<T>.operator !=(Silk.NET.Maths.Sphere<T> value1, Silk.NET.Maths.Sphere<T> value2) -> bool
static Silk.NET.Maths.Sphere<T>.operator ==(Silk.NET.Maths.Sphere<T> value1, Silk.NET.Maths.Sphere<T> value2) -> bool
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Vector4 value) -> Silk.NET.Maths.Vector4<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(this System.Numerics.Matrix3x2 value) -> Silk.NET.Maths.Matrix3x2<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(this System.Numerics.Matrix4x4 value) -> Silk.NET.Maths.Matrix4x4<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(this System.Numerics.Plane value) -> Silk.NET.Maths.Plane<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(this System.Numerics.Quaternion value) -> Silk.NET.Maths.Quaternion<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(this System.Numerics.Vector2 value) -> Silk.NET.Maths.Vector2<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(this System.Numerics.Vector3 value) -> Silk.NET.Maths.Vector3<float>
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Vector4<float> value) -> System.Numerics.Vector4
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(this Silk.NET.Maths.Matrix3x2<float> value) -> System.Numerics.Matrix3x2
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(this Silk.NET.Maths.Matrix4x4<float> value) -> System.Numerics.Matrix4x4
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(this Silk.NET.Maths.Plane<float> value) -> System.Numerics.Plane
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(this Silk.NET.Maths.Quaternion<float> value) -> System.Numerics.Quaternion
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(this Silk.NET.Maths.Vector2<float> value) -> System.Numerics.Vector2
static Silk.NET.Maths.SystemNumericsExtensions.ToSystem(this Silk.NET.Maths.Vector3<float> value) -> System.Numerics.Vector3
static Silk.NET.Maths.Vector2.Abs<T>(Silk.NET.Maths.Vector2<T> value) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Add<T>(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Clamp<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> min, Silk.NET.Maths.Vector2<T> max) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Distance<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> value2) -> T
static Silk.NET.Maths.Vector2.DistanceSquared<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> value2) -> T
static Silk.NET.Maths.Vector2.Divide<T>(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Divide<T>(Silk.NET.Maths.Vector2<T> left, T divisor) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Dot<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> value2) -> T
static Silk.NET.Maths.Vector2.Lerp<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> value2, T amount) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Max<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Min<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Vector2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Multiply<T>(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Multiply<T>(Silk.NET.Maths.Vector2<T> left, T right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Multiply<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Multiply<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector2.Multiply<T>(Silk.NET.Maths.Vector2<T> value1, Silk.NET.Maths.Matrix2x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector2.Multiply<T>(T left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Negate<T>(Silk.NET.Maths.Vector2<T> value) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Normalize<T>(Silk.NET.Maths.Vector2<T> value) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Reflect<T>(Silk.NET.Maths.Vector2<T> vector, Silk.NET.Maths.Vector2<T> normal) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.SquareRoot<T>(Silk.NET.Maths.Vector2<T> value) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Subtract<T>(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Transform<T>(Silk.NET.Maths.Vector2<T> position, Silk.NET.Maths.Matrix3x2<T> matrix) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Transform<T>(Silk.NET.Maths.Vector2<T> position, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.Transform<T>(Silk.NET.Maths.Vector2<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.TransformNormal<T>(Silk.NET.Maths.Vector2<T> normal, Silk.NET.Maths.Matrix3x2<T> matrix) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2.TransformNormal<T>(Silk.NET.Maths.Vector2<T> normal, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<byte>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<byte>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<decimal>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<decimal>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<double>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<double>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<float>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<float>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<int>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<int>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<long>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<long>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<sbyte>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<sbyte>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<short>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<short>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<System.Half>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<System.Half>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<uint>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<uint>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<ulong>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<ulong>
static Silk.NET.Maths.Vector2<T>.explicit operator Silk.NET.Maths.Vector2<ushort>(Silk.NET.Maths.Vector2<T> from) -> Silk.NET.Maths.Vector2<ushort>
static Silk.NET.Maths.Vector2<T>.One.get -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator !=(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> bool
static Silk.NET.Maths.Vector2<T>.operator *(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator *(Silk.NET.Maths.Vector2<T> left, T right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator *(T left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator +(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator -(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator -(Silk.NET.Maths.Vector2<T> value) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator /(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator /(Silk.NET.Maths.Vector2<T> value1, T value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.operator ==(Silk.NET.Maths.Vector2<T> left, Silk.NET.Maths.Vector2<T> right) -> bool
static Silk.NET.Maths.Vector2<T>.UnitX.get -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.UnitY.get -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector2<T>.Zero.get -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector3.Abs<T>(Silk.NET.Maths.Vector3<T> value) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Add<T>(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Clamp<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Vector3<T> min, Silk.NET.Maths.Vector3<T> max) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Cross<T>(Silk.NET.Maths.Vector3<T> vector1, Silk.NET.Maths.Vector3<T> vector2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Distance<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Vector3<T> value2) -> T
static Silk.NET.Maths.Vector3.DistanceSquared<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Vector3<T> value2) -> T
static Silk.NET.Maths.Vector3.Divide<T>(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Divide<T>(Silk.NET.Maths.Vector3<T> left, T divisor) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Dot<T>(Silk.NET.Maths.Vector3<T> vector1, Silk.NET.Maths.Vector3<T> vector2) -> T
static Silk.NET.Maths.Vector3.Lerp<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Vector3<T> value2, T amount) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Max<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Vector3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Min<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Vector3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Multiply<T>(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Multiply<T>(Silk.NET.Maths.Vector3<T> left, T right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Multiply<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector3.Multiply<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Multiply<T>(Silk.NET.Maths.Vector3<T> value1, Silk.NET.Maths.Matrix3x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector3.Multiply<T>(T left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Negate<T>(Silk.NET.Maths.Vector3<T> value) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Normalize<T>(Silk.NET.Maths.Vector3<T> value) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Reflect<T>(Silk.NET.Maths.Vector3<T> vector, Silk.NET.Maths.Vector3<T> normal) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.SquareRoot<T>(Silk.NET.Maths.Vector3<T> value) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Subtract<T>(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Transform<T>(Silk.NET.Maths.Vector3<T> position, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.Transform<T>(Silk.NET.Maths.Vector3<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3.TransformNormal<T>(Silk.NET.Maths.Vector3<T> normal, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<byte>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<byte>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<decimal>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<decimal>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<double>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<double>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<float>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<float>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<int>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<int>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<long>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<long>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<sbyte>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<sbyte>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<short>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<short>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<System.Half>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<System.Half>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<uint>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<uint>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<ulong>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<ulong>
static Silk.NET.Maths.Vector3<T>.explicit operator Silk.NET.Maths.Vector3<ushort>(Silk.NET.Maths.Vector3<T> from) -> Silk.NET.Maths.Vector3<ushort>
static Silk.NET.Maths.Vector3<T>.One.get -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator !=(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> bool
static Silk.NET.Maths.Vector3<T>.operator *(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator *(Silk.NET.Maths.Vector3<T> left, T right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator *(T left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator +(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator -(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator -(Silk.NET.Maths.Vector3<T> value) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator /(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator /(Silk.NET.Maths.Vector3<T> value1, T value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.operator ==(Silk.NET.Maths.Vector3<T> left, Silk.NET.Maths.Vector3<T> right) -> bool
static Silk.NET.Maths.Vector3<T>.UnitX.get -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.UnitY.get -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.UnitZ.get -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector3<T>.Zero.get -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector4.Abs<T>(Silk.NET.Maths.Vector4<T> value) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Add<T>(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Clamp<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Vector4<T> min, Silk.NET.Maths.Vector4<T> max) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Distance<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Vector4<T> value2) -> T
static Silk.NET.Maths.Vector4.DistanceSquared<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Vector4<T> value2) -> T
static Silk.NET.Maths.Vector4.Divide<T>(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Divide<T>(Silk.NET.Maths.Vector4<T> left, T divisor) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Dot<T>(Silk.NET.Maths.Vector4<T> vector1, Silk.NET.Maths.Vector4<T> vector2) -> T
static Silk.NET.Maths.Vector4.Lerp<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Vector4<T> value2, T amount) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Max<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Vector4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Min<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Vector4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Multiply<T>(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Multiply<T>(Silk.NET.Maths.Vector4<T> left, T right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Multiply<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x2<T> value2) -> Silk.NET.Maths.Vector2<T>
static Silk.NET.Maths.Vector4.Multiply<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x3<T> value2) -> Silk.NET.Maths.Vector3<T>
static Silk.NET.Maths.Vector4.Multiply<T>(Silk.NET.Maths.Vector4<T> value1, Silk.NET.Maths.Matrix4x4<T> value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Multiply<T>(T left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Negate<T>(Silk.NET.Maths.Vector4<T> value) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Normalize<T>(Silk.NET.Maths.Vector4<T> vector) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.SquareRoot<T>(Silk.NET.Maths.Vector4<T> value) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Subtract<T>(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Transform<T>(Silk.NET.Maths.Vector2<T> position, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Transform<T>(Silk.NET.Maths.Vector2<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Transform<T>(Silk.NET.Maths.Vector3<T> position, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Transform<T>(Silk.NET.Maths.Vector3<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Transform<T>(Silk.NET.Maths.Vector4<T> value, Silk.NET.Maths.Quaternion<T> rotation) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4.Transform<T>(Silk.NET.Maths.Vector4<T> vector, Silk.NET.Maths.Matrix4x4<T> matrix) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<byte>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<byte>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<decimal>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<decimal>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<double>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<double>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<float>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<float>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<int>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<int>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<long>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<long>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<sbyte>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<sbyte>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<short>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<short>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<System.Half>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<System.Half>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<uint>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<uint>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<ulong>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<ulong>
static Silk.NET.Maths.Vector4<T>.explicit operator Silk.NET.Maths.Vector4<ushort>(Silk.NET.Maths.Vector4<T> from) -> Silk.NET.Maths.Vector4<ushort>
static Silk.NET.Maths.Vector4<T>.One.get -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator !=(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> bool
static Silk.NET.Maths.Vector4<T>.operator *(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator *(Silk.NET.Maths.Vector4<T> left, T right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator *(T left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator +(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator -(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator -(Silk.NET.Maths.Vector4<T> value) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator /(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator /(Silk.NET.Maths.Vector4<T> value1, T value2) -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.operator ==(Silk.NET.Maths.Vector4<T> left, Silk.NET.Maths.Vector4<T> right) -> bool
static Silk.NET.Maths.Vector4<T>.UnitW.get -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.UnitX.get -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.UnitY.get -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.UnitZ.get -> Silk.NET.Maths.Vector4<T>
static Silk.NET.Maths.Vector4<T>.Zero.get -> Silk.NET.Maths.Vector4<T>